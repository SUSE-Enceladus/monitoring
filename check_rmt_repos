#!/usr/bin/env python3

# Copyright (c) 2019 SUSE LLC  All rights reserved.
#
# check_rmt_repos is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, version 2 of
# the License.
#
# check_dir_empty is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with susePublicCloudInfoClient. If not, see
# <http://www.gnu.org/licenses/>.
#

import argparse
import json
import os
import subprocess
import sys

# Nagios states
OK = 0
WARNING = 1
CRITICAL = 2
UNKNOWN = 3

def get_enabled_rmt_repos():
    repo_info_cmd = ['rmt-cli', 'repos', 'list', '--csv']
    proc = subprocess.Popen(repo_info_cmd, stdout=subprocess.PIPE)
    avail_repo_data, errors = proc.communicate()

    if errors:
        print('Error executing "rmt-cli repos list"')
        sys.exit(CRITICAL)
    
    rmt_repos = {}
    repo_table = avail_repo_data.decode().strip().split('\n')
    for repo_data in repo_table:
        repo_detail = repo_data.split(',')
        id = repo_detail[0].strip()
        rmt_repos[id] = True
    return rmt_repos

def get_rmt_cli_command():
    rmt_cli_pid = get_rmt_cli_pid()
    rmt_cli_cmd = None
    if rmt_cli_pid:
        rmt_cli_cmd = open('/proc/%s/cmdline' % rmt_cli_pid, 'r').read()
        rmt_cli_cmd = rmt_cli_cmd.replace('\x00', ' ')
    return rmt_cli_cmd

def get_rmt_cli_pid():
    rmt_cli_pid_cmd = ['ps', '-C', 'rmt-cli', '-o', 'pid=']
    rmt_cli_pid = subprocess.Popen(rmt_cli_pid_cmd, stdout=subprocess.PIPE)
    pid_data = rmt_cli_pid.communicate()
    return pid_data[0].strip().decode()

# Set up command line argument parsing
argparse = argparse.ArgumentParser(description='Monitor repo setup for RMT')
argparse.add_argument(
    '-f', '--config-file',
    dest='config_file_path',
    default='/etc/rmt-utils/rmt_repository_config.json',
    help='Path to json config file for RMT repo configuration',
    metavar='CONFIG_FILE'
)
args = argparse.parse_args()

rmt_repos = get_enabled_rmt_repos()

if not os.path.exists(args.config_file_path):
    print('Missing "%s"' % args.config_file_path)
    sys.exit(CRITICAL)

not_enabled = []
missing_repo_dirs = []
with open(args.config_file_path) as json_file:
    config_repos = json.load(json_file)
    for id, repo_info in config_repos.items():
        if not rmt_repos.get(id):
            not_enabled.append('%s, %s' % (repo_info.get('description'), id))
        if 'mirror' in get_rmt_cli_command():
            # WHile the mirro process is running we do not complain about
            # missing directories. They are expected to show up at the end
            # of the mirror process.
            continue
        full_repo_path = '/var/lib/rmt/public/repo/' + repo_info.get('location')
        if not os.path.exists(full_repo_path):
            missing_repo_dirs.append(full_repo_path)

if not_enabled:
    print('Following expected repos are not enabled: "%s"' % str(not_enabled))
    sys.exit(CRITICAL)
if missing_repo_dirs:
    print(
        'Following repo directories are missing: "%s"' %str(missing_repo_dirs)
    )
    sys.exit(CRITICAL)
